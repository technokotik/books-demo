{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","books-demo/tests/app.lint-test.js","books-demo/tests/integration/helpers/get-author-name-test.js","books-demo/tests/test-helper.js","books-demo/tests/tests.lint-test.js","books-demo/tests/unit/routes/author-test.js","books-demo/tests/unit/routes/index-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('books-demo/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/get-author-name.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/get-author-name.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/author.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/author.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n});","define('books-demo/tests/integration/helpers/get-author-name-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Helper | get-author-name', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it renders', async function (assert) {\n      this.set('inputValue', '1234');\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"tTfXO4u+\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"get-author-name\\\",[[22,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '1234');\n    });\n  });\n});","define('books-demo/tests/test-helper', ['books-demo/app', 'books-demo/config/environment', '@ember/test-helpers', 'ember-qunit'], function (_app, _environment, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n\n  (0, _emberQunit.start)();\n});","define('books-demo/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('integration/helpers/get-author-name-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/get-author-name-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/author-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/author-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n});","define('books-demo/tests/unit/routes/author-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | author', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:author');\n      assert.ok(route);\n    });\n  });\n});","define('books-demo/tests/unit/routes/index-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:index');\n      assert.ok(route);\n    });\n  });\n});","define('books-demo/config/environment', [], function() {\n  var prefix = 'books-demo';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('books-demo/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}